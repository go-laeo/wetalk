// Code generated by ent, DO NOT EDIT.

package coin

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/go-laeo/wetalk/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Deal applies equality check predicate on the "deal" field. It's identical to DealEQ.
func Deal(v string) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeal), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int64) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v int64) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DealEQ applies the EQ predicate on the "deal" field.
func DealEQ(v string) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeal), v))
	})
}

// DealNEQ applies the NEQ predicate on the "deal" field.
func DealNEQ(v string) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeal), v))
	})
}

// DealIn applies the In predicate on the "deal" field.
func DealIn(vs ...string) predicate.Coin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeal), v...))
	})
}

// DealNotIn applies the NotIn predicate on the "deal" field.
func DealNotIn(vs ...string) predicate.Coin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeal), v...))
	})
}

// DealGT applies the GT predicate on the "deal" field.
func DealGT(v string) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeal), v))
	})
}

// DealGTE applies the GTE predicate on the "deal" field.
func DealGTE(v string) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeal), v))
	})
}

// DealLT applies the LT predicate on the "deal" field.
func DealLT(v string) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeal), v))
	})
}

// DealLTE applies the LTE predicate on the "deal" field.
func DealLTE(v string) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeal), v))
	})
}

// DealContains applies the Contains predicate on the "deal" field.
func DealContains(v string) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeal), v))
	})
}

// DealHasPrefix applies the HasPrefix predicate on the "deal" field.
func DealHasPrefix(v string) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeal), v))
	})
}

// DealHasSuffix applies the HasSuffix predicate on the "deal" field.
func DealHasSuffix(v string) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeal), v))
	})
}

// DealEqualFold applies the EqualFold predicate on the "deal" field.
func DealEqualFold(v string) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeal), v))
	})
}

// DealContainsFold applies the ContainsFold predicate on the "deal" field.
func DealContainsFold(v string) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeal), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int64) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int64) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int64) predicate.Coin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int64) predicate.Coin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int64) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int64) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int64) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int64) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v int64) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v int64) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBalance), v))
	})
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...int64) predicate.Coin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBalance), v...))
	})
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...int64) predicate.Coin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBalance), v...))
	})
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v int64) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBalance), v))
	})
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v int64) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBalance), v))
	})
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v int64) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBalance), v))
	})
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v int64) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBalance), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Coin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Coin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Coin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Coin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Coin) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Coin) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Coin) predicate.Coin {
	return predicate.Coin(func(s *sql.Selector) {
		p(s.Not())
	})
}
